# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: 

name: 'Terraform'

# Trigger the workflow on push to the specified branch or any pull request
on:
  push:
    branches: [ "lets-practice-actions-feature" ]
  pull_request:

# Set permissions for the GITHUB_TOKEN to read repository contents
permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Ensure all commands run with the Bash shell for consistency
    defaults:
      run:
        shell: bash

    steps:
    # Step 1: Checkout the repository code
    - name: Checkout
      uses: actions/checkout@v4

    # Step 2: Set up Terraform CLI and configure with Terraform Cloud API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Step 3: Initialize Terraform working directory
    - name: Terraform Init
      run: terraform init

    # Step 4: Check Terraform files for consistent formatting
    - name: Terraform Format
      run: terraform fmt -check
      env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

    # Step 5: Generate and show the Terraform execution plan
    - name: Terraform Plan
      run: terraform plan -input=false
      env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

    # Step 6: Apply the Terraform configuration
    - name: Terraform Apply
      # Condition is commented out, will run on every push
      # if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
      env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
