name: K8s Ansible Workflow

on:
  # push:
  #   branches: [ main ]
  workflow_dispatch:

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    defaults:
      run:
        shell: bash
        working-directory: ./TerraformOnGCP/k8s-argocd-monitoring-with-ansible
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: ${{ secrets.GCP_ACCESS_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }} 

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init

      - name: Check and import existing OS Login metadata
        run: |
          # Check if OS Login is already enabled
          OS_LOGIN_VALUE=$(gcloud compute project-info describe --project ${{ secrets.GCP_PROJECT_ID }} --format='value(commonInstanceMetadata.items.enable-oslogin)' || echo "")
          
          if [ "$OS_LOGIN_VALUE" == "TRUE" ]; then
            echo "OS Login is already enabled, importing to Terraform state..."
            # Import the existing metadata into Terraform state
            terraform import google_compute_project_metadata_item.os_login_enabled ${{ secrets.GCP_PROJECT_ID }}:enable-oslogin || echo "Import failed, but continuing as the resource may already be in the state..."
          else
            echo "OS Login not yet enabled, Terraform will create it."
          fi
        env:
          TF_VAR_gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_gcp_sa_email: ${{ secrets.GCP_SA_EMAIL }}
          TF_VAR_ssh_sa_email: ${{ secrets.SSH_SA_EMAIL }}
        continue-on-error: true  # Don't fail the workflow if import fails
        
      # - name: Terraform Plan
      #   run: terraform plan -out=tfplan
      #   id: plan
      #   env:
      #     TF_VAR_gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}
      #     TF_VAR_gcp_sa_email: ${{ secrets.GCP_SA_EMAIL }}
      #     TF_VAR_ssh_sa_email: ${{ secrets.SSH_SA_EMAIL }}

      # - name: Terraform Apply
      #   run: terraform apply -auto-approve
      #   env:
      #     TF_VAR_gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}
      #     TF_VAR_gcp_sa_email: ${{ secrets.GCP_SA_EMAIL }}
      #     TF_VAR_ssh_sa_email: ${{ secrets.SSH_SA_EMAIL }}