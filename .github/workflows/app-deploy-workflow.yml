name: Create svc and deployment

on:
  workflow_run:
    workflows: ["Deploy GKE Cluster"]
    types:
      - completed
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    defaults:
      run:
        working-directory: ./TerraformOnGCP/GKE

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: ${{ secrets.GCP_ACCESS_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          token_format: 'access_token'

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          install_components: gke-gcloud-auth-plugin

      - name: connect to GKE
        run: |
            gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
            gcloud container clusters get-credentials gke-cluster --zone us-central1-f --project ${{ secrets.GCP_PROJECT_ID }}
        env:
            GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}

      - name: Create Argo CD Namespace svc
        run: kubectl apply -f k8s-configs/argocd-ns.yml

      - name: Deploy Nginx
        run: kubectl apply -f k8s-configs/deployment.yml

      - name: Create LoadBalancer svc
        run: kubectl apply -f k8s-configs/lb-and-ingress-svc.yml

      # - name: Create Ansible Inventory Directory
      #   run: mkdir -p ansible/inventory

      # - name: Set up Terraform # Required for Ansible inventory
      #   uses: hashicorp/setup-terraform@v2

      # - name: Initialize Terraform
      #   run: terraform init

      # - name: Configure Dynamic Inventory (gcp.yml)
      #   run: |
      #     echo "Creating inventory file..."
      #     cat <<EOF > ansible/inventory/gcp.yml
      #     plugin: google.cloud.gcp_compute
      #     projects:
      #       - ${{ secrets.GCP_PROJECT_ID }}
      #     regions:
      #       - us-central1-f
      #     filters: []
      #     auth_kind: serviceaccount
      #     service_account_file: ${{ steps.auth.outputs.credentials_file_path }}
      #     EOF
      #     echo "Inventory file created: $(ls -l ansible/inventory/gcp.yml)"
      #   shell: bash

      # - name: Install google.cloud collection
      #   run: ansible-galaxy collection install google.cloud

      # - name: Configure Dynamic Inventory (gcp.yml)
      #   run: |
      #     cat <<EOF > ansible/inventory/gcp.yml
      #     [localhost]
      #     localhost ansible_connection=local ansible_python_interpreter=$(which python3)
      #     EOF
      #   shell: bash
      #   working-directory: ./TerraformOnGCP/GKE

      # - name: Install collections
      #   run: |
      #     ansible-galaxy collection install google.cloud -p ./collections
      #     ansible-galaxy collection install community.kubernetes -p ./collections
      #   working-directory: ./TerraformOnGCP/GKE

      # - name: Debug Ansible configuration
      #   run: |
      #       pwd
      #       ls -la
      #       echo "Checking if ansible.cfg exists:"
      #       find . -name "ansible.cfg"
      #       echo "Content of ansible.cfg:"
      #       cat $(find . -name "ansible.cfg")
      #       echo "Ansible config dump:"
      #       ansible-config dump | grep COLLECTIONS_PATHS
      #   working-directory: ./TerraformOnGCP/GKE

      # - name: Install Argo CD with Helm (Ansible)
      #   uses: dawidd6/action-ansible-playbook@v2
      #   with:
      #     playbook: /home/runner/work/GCP/GCP/TerraformOnGCP/GKE/ansible/playbooks/install-argocd-with-helm.yml
      #     options: |
      #       --extra-vars "argocd_namespace=argocd"
      #       --inventory ansible/inventory/gcp.yml
      #       --extra-vars "ansible_python_interpreter=$(which python3)"

      # - name: Debug - Verify Working Directory and File
      #   run: |
      #     pwd
      #     ls -l ${{ github.workspace }}/TerraformOnGCP/GKE/ansible/playbooks/
      #   working-directory: ./TerraformOnGCP/GKE

      # - name: Set Python interpreter path
      #   run: echo "PYTHON_PATH=$(which python3)" >> $GITHUB_ENV

      # - name: Install required Python packages # install the kubernetes Python library for the third task that's waiting for the ArgoCD API server to become ready.
      #   run: |
      #     pip install kubernetes

      # - name: Install Argo CD with Helm (Ansible)
      #   uses: dawidd6/action-ansible-playbook@v2
      #   with:
      #     playbook: ${{ github.workspace }}/TerraformOnGCP/GKE/ansible/playbooks/install-argocd-with-helm.yml
      #     options: |
      #       --extra-vars "argocd_namespace=argocd"
      #       --inventory ${{ github.workspace }}/TerraformOnGCP/GKE/ansible/inventory/gcp.yml
      #       --extra-vars "ansible_python_interpreter=/usr/bin/python3"
      #       --extra-vars "kubeconfig_path=~/.kube/config"