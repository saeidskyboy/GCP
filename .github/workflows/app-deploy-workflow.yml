name: Deploy Application

on:
  workflow_run:
    workflows: ["Deploy GKE Cluster"]
    types:
      - completed
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: ${{ secrets.GCP_ACCESS_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          install_components: gke-gcloud-auth-plugin

      - name: Configure gcloud and kubectl
        run: |
            echo $GCP_SA_KEY > $GITHUB_WORKSPACE/gcp-sa-key.json
            gcloud auth activate-service-account --key-file=$GITHUB_WORKSPACE/gcp-sa-key.json
            gcloud config set project cloud-2255
            gcloud container clusters get-credentials gke-cluster --zone us-central1-f --project cloud-2255
        shell: bash
        env:
            GCP_SA_KEY: ${{ secrets.GCP_ACCESS_KEY }}
            GOOGLE_APPLICATION_CREDENTIALS: $GITHUB_WORKSPACE/gcp-sa-key.json

      - name: Create Argo CD Namespace
        run: kubectl create namespace argocd

      - name: Deploy Nginx
        run: kubectl apply -f k8s-configs/deployment.yml

      - name: Deploy LoadBalancer and Ingress
        run: kubectl apply -f k8s-configs/lb-and-ingress-svc.yml

      - name: Create Ansible Inventory Directory
        run: mkdir -p ansible/inventory
      - name: Set up Terraform # Required for Ansible inventory
        uses: hashicorp/setup-terraform@v2
      - name: Initialize Terraform
        run: terraform init
      - name: Configure Dynamic Inventory (gcp.yml)
        run: |
          cat <<EOF > ansible/inventory/gcp.yml
          plugin: google.cloud.gcp_compute
          projects:
            - ${{ secrets.GCP_PROJECT_ID }}
          regions:
            - $(terraform output -raw cluster_region)
          filters: []
          auth_kind: serviceaccount
          service_account_file: ${{ steps.auth.outputs.credentials_file_path }}
          EOF
        shell: bash

      - name: Install google.cloud collection
        run: ansible-galaxy collection install google.cloud

      - name: Install Argo CD with Helm (Ansible)
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: ansible/playbooks/install-argocd-with-helm.yml
          options: |
            --extra-vars "argocd_namespace=argocd"
            --inventory ansible/inventory/gcp.yml