name: SSH Key Management

on:
    workflow_run:
      workflows: ["K8s Ansible Workflow"]
      types:
        - completed
    workflow_dispatch:

jobs:
  install:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    defaults:
      run:
        working-directory: ./TerraformOnGCP/k8s-argocd-monitoring-with-ansible
  

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set action based on trigger
        id: set-action
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "ACTION=${{ github.event.inputs.action }}" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "ACTION=setup" >> $GITHUB_ENV
          fi

      - name: Authenticate to Google Cloud
        id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: ${{ secrets.GCP_ACCESS_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }} 

      - name: Setup Terraform (for key generation)
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init
        
      - name: Generate SSH Key
        if: ${{ env.ACTION == 'setup' }}
        run: |
          # Apply just the key generation part of the Terraform configuration
          terraform apply -target=tls_private_key.ansible_ssh -auto-approve
          terraform apply -target=google_secret_manager_secret.ansible_private_key_secret -auto-approve
          terraform apply -target=google_secret_manager_secret_version.ansible_private_key_version -auto-approve
          terraform apply -target=google_secret_manager_secret_iam_member.ansible_vm_secret_accessor -auto-approve
        env:
          TF_VAR_gcp_project_id: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_gcp_sa_email: ${{ secrets.GCP_SA_EMAIL }}
          TF_VAR_ssh_sa_email: ${{ secrets.SSH_SA_EMAIL }}

      - name: Setup SSH key in OS Login
        if: ${{ env.ACTION == 'setup' }}
        id: 'ssh-setup'
        run: |
            # Extract the public key from Terraform output
            SSH_PUBLIC_KEY=$(terraform output -raw ansible_ssh_public_key)
            
            # Create a temporary credentials file for the SSH service account
            echo '${{ secrets.SSH_SA_KEY }}' > /tmp/ssh_sa_key.json
            
            # Clear any previous auth settings
            gcloud auth revoke --all || true
            
            # Use the SSH service account credentials explicitly for this command
            echo "$SSH_PUBLIC_KEY" > /tmp/ansible_ssh.pub
            
            # Run gcloud with explicit credential file, bypassing the active credentials
            CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE=/tmp/ssh_sa_key.json \
            gcloud compute os-login ssh-keys add --key-file=/tmp/ansible_ssh.pub
            
            # Verify the keys
            CLOUDSDK_AUTH_CREDENTIAL_FILE_OVERRIDE=/tmp/ssh_sa_key.json \
            gcloud compute os-login ssh-keys list
            
            # Clean up sensitive files
            rm /tmp/ssh_sa_key.json /tmp/ansible_ssh.pub